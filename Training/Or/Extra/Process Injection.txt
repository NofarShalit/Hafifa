Process Injection

הזרקת תהליך היא טכניקת התחמקות מהגנות המשומשת הרבה על ידי פוגענים ומתקפות חסרות קבצים (fileless), המתקפה נותנת לנו
להריץ קוד באמצעות המרחב כתובות זיכרון של תהליך אחר. 

1) הזרקת תהליך קלאסית על ידי קריאה לThread מרוחק (CreateRemoteThread) וטעינת ספרייה (LoadLibrary)
הפוגען כותב את הכתובת של הDLL הזדוני שלו לתוך מרחב הכתובות הוירטואלי של תהליך אחר, ומבטיח שתהליך מרוחק יטען אותו על ידי יצירת Thread
מרוחק בתהליך נבחר

הפוגען צריך תחילה למצוא תהליך שאליו יזריק כגון svchost.exe, בדרך כלל עוברים על רשימת תהליכים עד שבוחרים אחד,
ניתן להשתמש ב3 APIs לטובת החיפוש: 
CreateToolHelp32Snapshot - הAPI הזה מונה את הheap או את הmodules של תהליך נבחר או של כל התהליכים ומחזיר תמונת זמן (snapshot)
Process32First - מחזיר מידע על התהליך הראשון בsnapshot
Process32Next - עובר להתליך הבא בsnapshot, לרוב משתמשים בProcess32Next בלופ על שמגיעים לתהליך הרצוי
אחר כך משיגים אחיזה (handle) על התהליך הרצוי על ידי קריאה לOpenProcess, הפוגען יקרא לVirtualAllocEx בכדי ליצור לעצמו
מקום בזיכרון לכתוב אליו את הכתובת של הDLL שלו, ולWriteProcessMemory בכדי לכתוב את הכתובת בתוך המקום שיצר, 
לבסוף בכדי שהקוד ירוץ בתהליך אחר הפוגען קורא לAPIs כגון CreateRemtoeThread, NtCreateThreadEx, RtlCreateThread
הרעיון הכללי הוא להעביר את הכתובת של LoadLibrary לאחד מהAPIs האלו בכדי שתהליך מרוחק יריץ את הDLL בשביל הפוגען

CreateRemoteThread מפוקח ומנוטר על ידי המון מוצרי אבטחת מידע, בנוסף הוא דורש DLL זדוני על המחשב שאפשר לזהות, בהנחה שתוקפים ישתמשו
במתקפה הזאת בכדי להתחמק מהגנות, תוקפים מתוחכמים לא ישתמשו בדרך הזאת

2) הזרקת קובץ PE
במקום להעביר את הכתובת של LoadLibrary, הפוגען יכול להעתיק את הקוד הזדוני שלו לתוך תהליך פתוח ולגרום להרצה שלו על ידי CreateRemoteThread
או על ידי shellcode (פיסת קוד קטנה המשתמשת בפריצה במערכת על מנת להריץ פקודה), היתרון של הזרקת PE על גבי LoadLibrary הוא שאין צורך להכניס DLL זדוני לדיסק
בדומה לטכניקה הראשונה, הפוגען יוצר לעצמו מקום בזיכרון של התהליך הנבחר על ידי שימוש בVitualAllocEx, אבל במקום לרשום את הכתובת של הDLL שלו, הפוגען מכניס את
הקוד הזדוני שלו ישירות לתוך מרחב הכתובות של התהליך על ידי קריאה לWriteProcessMemory, הקושי בשיטה זאת הוא השינוי של כתובת הבסיס של התהליך הנבחר.
כאשר פוגען מכניס את קובץ הPE שלו לתוך תהליך אחר, התהליך יקבל כתובת בסיס חדשה ולא צפויה, ולכן צריך לחשב אותה מחדש. כדי להתגבר על זה הפוגען צריך למצוא את 
הRelocation Table Address של התהליך הנבחר ולחשב את הכתובת האבסולוטית של התהליך על ידי מעבר של כל המתארים (Relocation Descriptors)

כאשר מאבחנים הזרקת PE נפוץ לראות לולאות אחת בתוך השנייה ומיד אחר כך קריאה לCreateRemoteThread, אחרי שהפוגען מסיים לחשב את כל הכתובות ההכרחיות הוא מעביר
כתובת ההתחלה לCreateRemoteThread וגורם להרצה של התהליך ואיתו גם של הקוד הזדוני