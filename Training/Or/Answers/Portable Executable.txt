Portable Executable
1) DLL is a Dynamic Link Library, meaning it is a library of functions that can be imported by any PE file in order to either,
  have ready to use functions and not create yourself each and everyone of them, or either to have control over api, software, other files, etc.
  the use of DLL's is for storing functions and importing them like librarys in code. The biggest user of DLL's is the OS with it's apis,
  but every developer who wants to communicate with other software or with the OS can include DLL's in its code in order to get api access to whatever he wants.
  DLL's are "linked" to the file and therefore don't take space in the file, the file just points to them and they are saved somewhere else,
  they can also be included in the file so it will be portable and independant, but people tend to use LIB files for that which are just DLL's but non dynamic.

2) PE files are built in a certain structure:
  - DOS Header
  - DOS Stub
  - NT Headers
  - Section Table
  The specific header to focus on is the FILE_HEADER(IMAGE_FILE_HEADER) inside the NT Headers.
  This header structure is made from 7 parts: Machine, NumberOfSections, TimeDateStamp, PointerToSymbolTable, NumberOfSymbols, SizeOfOptionalHeader, Characteristics.
  The last part named "Characteristics" is the one who can tell us if a PE file is a DLL or an EXE(or a different type of executable that is not a DLL),
  Characteristics is WORD long meaning 2 Bytes and has a value, each flag set adds value to it's total and thats how the Characteristics "member"
  knows what flag is set, it calculates and subtracts the values belonging to each flag.
  The two main flags to set are:
    0x0002 (IMAGE_FILE_EXECUTABLE_IMAGE) that says the PE file can be run and therefore cannot be a DLL, since DLL's cannot be run.
    0x2000 (IMAGE_FILE_DLL) that when set, directly states that this file is a DLL

3) Most first-party (windows) DLLs are devided to 2 groups:
  - 32 bit windows: the shared 32 bit DLLs are located in "C:\Windows\System32" and its subfolders
  - 64 bit windows: the shared 64 bit DLLs are located in "C:\Windows\System32" and its subfolders
  - 64 bit windows: the shared 32 bit DLLs are located in "C:\Windows\SysWOW64" and its subfolders
  the difference is that only in 64 bit windows you need backwards compatabillity, and therefore
  the 32 bit DLLs in 64 bit windows will be located in SysWOW64 folder and not the normal System32
  so to not mix them up.
  There is also something called "WOW64 file redirection" that on 64 bit windows, when a 32 bit proccess
  tries to open a DLL in System32 it redirects it to SysWOW64

4) Before searching for DLLs the system checks for 3 things:
  1. If a DLL with the same module name is loaded in memory, the system will check for redirection
    before loading the DLL, ignoring completly the working directory and not searching for the DLL
  2. If the DLL is on the list of known DLLs (for the version of windows on which the application is running,
    for example you can try running applications on compatabillity mode for other windows versions)
    the system will use it's copy of known DLLs for the specified version, and their known dependent DLLs instead of searching.
    Known DLLs list are located in the registry key "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs"
  3. If a DLL has dependencies, the system searches for the DLLs as if they were loaded without their full path,
    even if the first DLL was loaded using full path.

  After checking for all of the above, the system will start searching fir the DLLs, and the searching order is dependent
  by which type of application is running, UWP apps and Desktop applictions has 2 different searching orders
  UWP:
  If the module is not already loaded or the DLLs are not in the known DLL list, the system searches in this order:
  1. The package dependency graph of the proccess. the application package and any dependencies specified in
    <PackageDependency> in the <Dependencies> section. dependencies are searched in the order they appear in the manifest.
  2. The directory the calling proccess was loaded from
  3. The system directory "%SystemRoot%\System32"

  Alternate Search Order for UWP:
  if a module changes the standard search order by calling the "LoadLibraryEx" function with
  "LOAD_WITH_ALTERED_SEARCH_PATH", the system searches the directory the module was loaded from instead
  of the directory of the calling proccess (step 2 is changed)

  Desktop Application:
  There are a few fazes before even starting to search for DLLs with Desktop Applications,
  First we check if the module is not already loaded or the DLLs are not in the known DLL list, then
  We let the Desktop Applications control from where a DLL is loaded from by specifing full path,
  using DLL redirection, or using a manifest, then
  We check if SafeDLLSearchMode is enabled, (it is enabled be default, and we can disable it by creating
  the registry value "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode"
  and setting it to 0), then
  If SafeDLLSearchMode is enabled the steps are:
   1. The directory from which the application is loaded
   2. The system directory
   3. The 16-bit system directory
   4. The windows directory
   5. The current directory
   6. The directories listed in the PATH variable
   If SafeDLLSearchMode is disabled step 5 turns to be step 2, and everything else is pushed down by one.

5) DLL injection is a technique used for running code from within the address space of another proccess,
    by forcing it to load a DLL of our choosing while it is executing

  
6) The way Reflective DLL Injection works is as follows:
    - Execution is passed, with CreateRemoteThread() or a bootstrap shellcode, to the library's
    ReflectiveLoader function from the library's export table
    - The ReflectiveLoader will calculate its own image's current location in memory to be able to parse its own headers
    - The ReflectiveLoader will parse the proccess kernel32.dll to calculate the addresses of
    LoadLibraryA, GetProcAddress, VirtualAlloc
    - The ReflectiveLoader will allocate a region of memory to load its own image,
    the location of the allocation is not important
    - The library's headers and sections are loaded into their new locations in memory
    - The ReflectiveLoader will proccess the new image's import table, loading additional library's and resolving their addresses
    - The ReflectiveLoader will proccess it's new relocation table
    - The ReflectiveLoader will call its newly loaded image's enrty point function,
    "DLLMain" with "DLL_PROCCESS_ATTACH"
    - The library has been successfully loaded into memory
    - The ReflectiveLoader will return execution to the initial whatever that called it

    Noraml DLL Injection is like telling the file to load a DLL when it starts running,
    Reflective DLL Injection is when the proccess is already running and we inject the dll and functions
    to its working memory

7) A PE packer gets a PE file, extracts all of its information, modifies and recreates the file with it's own structure,
    it may compress of the file sections into a new one and add its decompression code as the entrypoint,
    when the PE is launched it decompresses the data into a memory space, it may also encrypt the code so that
    the original code is only readable at runtime.
    3 Programs used for packing PE files are: PE-Packer, UPX, FilePacker

8) Obfuscation is the making of something difficult to understand,
    it is the action of making source or machine code that is difficult to read by humans or computers,
    encryption is a type of obfuscation, so does stripping metadata, repalcing classess and variable names with meaningless lables, etc.